package com.revature.finalp1.control;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.springframework.web.servlet.view.RedirectView;

import com.revature.finalp1.model.Log;
import com.revature.finalp1.model.Users;
import com.revature.finalp1.serv.UsersServ;



@RestController
public class UsersControl {


    @Autowired
    private final UsersServ usersService;

    public UsersControl(UsersServ usersService) {
        this.usersService = usersService;
    }
    
    @RequestMapping(path = "/", method = RequestMethod.GET)
    public String getUsers(Model model) {
        List<Log> users = usersService;
        model.addAttribute("ers_users", users);
        model.addAttribute("Log", new Log());
        return "ers_users";
    }   

//    @RequestMapping(path = "/save", method = RequestMethod.POST)
//    public ModelAndView save(@ModelAttribute Users user) {
//    	usersService.add(user);
//    	List<Users> users = usersService.findAll();
//        ModelAndView modelAndView = new ModelAndView();
//        modelAndView.setViewName("ers_users-data");
//        modelAndView.addObject("ers_users", users);
//        return modelAndView;
//    }
    
    @RequestMapping(path = "/", method = RequestMethod.POST)
    public RedirectView createUser(RedirectAttributes redirectAttributes, @ModelAttribute UserInfo userInfo) {
        usersService.createUser(userInfo);
        String message = "Created user <b>" + userInfo.getFirstName() + " " + userInfo.getLastName() + "</b> ✨.";
        RedirectView redirectView = new RedirectView("/", true);
        redirectAttributes.addFlashAttribute("userMessage", message);
        return redirectView;
    }

//    @RequestMapping(path = "/{id}", method = RequestMethod.GET)
//    public String findAll(Model model) {
//        List<Users> users = usersService.findAll();
//        model.addAttribute("ers_users", users);
//        model.addAttribute("ers_users", users);
//        return "ers_users";
   
    }
    @RequestMapping(path = "/{id}", method = RequestMethod.GET)
    public String getUser(Model model, @PathVariable("id") Integer id) {
        UserInfo userInfo = usersService.getUser(id);
        model.addAttribute("userInfo", userInfo);
        return "edit";
     }
    
    @RequestMapping(path = "/{id}", method = RequestMethod.POST)
    public RedirectView updateUser(RedirectAttributes redirectAttributes, @PathVariable("id") Integer id, @ModelAttribute UserInfo userInfo) {
        usersService.updateUser(id, userInfo);
        String message = (userInfo.isActive() ? "Updated " : "Deleted ") + " user <b>" + userInfo.getfirstname() + " " + userInfo.getlastname() + "</b> ✨.";
        RedirectView redirectView = new RedirectView("/", true);
        redirectAttributes.addFlashAttribute("userMessage", message);
        return redirectView;
     
}
    

