package com.revature.p2.myp2.model;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.revature.p2.myp2.model.Dialect.Status;
import com.revature.p2.myp2.repo.AccountRepo;
import com.revature.p2.myp2.serv.AccountServ;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.ToString;

/**
 * Represents a bank account that a User can own.
 * Every account can be of type CHECKING or SAVINGS.
 * Every account keeps a record of transactions on that account
 * Accounts must be approved before transactions can be performed on it.
 */
@Data
@AllArgsConstructor
@NoArgsConstructor
@ToString
@Entity(name="Accounts")
@Table(name = "accounts")
public class Account implements Serializable {


	/**Automatically generated universally unique identifier */
	private static final long serialVersionUID = -662794077232408056L;
	
	public static enum AccountType {
		CHECKING, SAVINGS
	}
	
	
	@Id
	@GeneratedValue(strategy=GenerationType.SEQUENCE,generator ="SEQ_ID_GEN")
	@Column(name="accounts_id", nullable=false, precision = 0)
	@SequenceGenerator(name ="SEQ_ID_GEN", sequenceName = "GI2S1.SEQ_ID", allocationSize=1)
	private Long accountsId;
//	@Column(name="accountsownerId")
//	private int ownerId;
	public Account(long accountsId) {
		this.accountsId = accountsId;
		currentBalance = 0.0 ;
	}
	@Column(name="accountsbalance")
	private double currentBalance;
	@Column(name="accountstype")
	private AccountType type;
	@Column(name="accountsapproved")
	private boolean approved = false;
	@SuppressWarnings("unused")
	private boolean status (boolean approved) {
		User AuthAcc = new User();
		if(AuthAcc.equals(users) && currentBalance >= 25) {
			
		      this.approved = isApproved();
		System.out.println (" Account Status approved " + currentBalance);}
	
    else if (!AuthAcc.equals(users) || currentBalance <= 24) {
    	this.approved= false;
    	System.out.println( " Status Invalid " + currentBalance);}
    else 
    	System.out.println("Please contact for further info");
		return false;}
	private double getCurrentBalance() {
		return currentBalance;
	}
	public long accountsId() {
		return accountsId;
	}
    public void deposit(double amount) {
    	currentBalance += amount;
    	System.out.println(accountsId + " has $" + currentBalance);
    }
    public void withdraw(double amount) {
    if (amount <= currentBalance) {
    	currentBalance -= amount;
    	System.out.println(accountsId + "has $" + currentBalance);}
    else {
    	System.out.println("Withdrawal by " + accountsId + "fails");
    }
 }
    
    public void transfer(double amount, Account account) {
    	if(this.currentBalance < amount) {
    		System.out.println("Transfer Fails");
    	}else {
    		this.currentBalance -= amount;
    		account.currentBalance += amount;
    		System.out.println("Account of " + this.accountsId + "becomes $" + this.currentBalance );
    		System.out.println("Account of " + account.accountsId + "becomes $" + account.currentBalance );
    	}
    }
    
    @ManyToOne
	@JsonBackReference
	   private User users;
	
	    @OneToMany(cascade=CascadeType.ALL, orphanRemoval=true)
	    @JoinColumn(name="usersid")
        private List<Transactions> transactions;
		
//		public Account(long l, String string ) {
			// TODO Auto-generated constructor stub
		}
	    
